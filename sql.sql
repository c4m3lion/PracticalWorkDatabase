DROP TABLE ADRESSES_TABLE;
CREATE TABLE ADRESSES_TABLE (STREET VARCHAR2(20), A_NUMBER NUMBER, CITY VARCHAR2(20), COUNTRY VARCHAR2(32), SYS_NC_ROWINFO$ DB_201ADB100.ADRESS_T GENERATED ALWAYS AS (null), SYS_NC_OID$ RAW(16) DEFAULT SYS_OP_GUID(), CONSTRAINT SYS_C0052008 UNIQUE (SYS_NC_OID$));
DROP TABLE AIRCRAFTS;
CREATE TABLE AIRCRAFTS (ID INTEGER NOT NULL, PLANE_NUMBER VARCHAR2(50) NOT NULL, CAPACITY INTEGER NOT NULL, CONSTRAINT TABLE1_PK PRIMARY KEY (ID));
DROP TABLE DELAYED_FLIGHTS_TABLE;
CREATE TABLE DELAYED_FLIGHTS_TABLE (REASON VARCHAR2(32), FLIGHT_DATE_INIT DATE, FLIGHT_DATE_LAST DATE, FLIGHT_ID INTEGER, SYS_NC_ROWINFO$ DB_201ADB100.DELAYED_FLIGHTS GENERATED ALWAYS AS (null), SYS_NC_OID$ RAW(16) DEFAULT SYS_OP_GUID(), CONSTRAINT SYS_C0052017 UNIQUE (SYS_NC_OID$));
DROP TABLE FLIGHT_DETAILS;
CREATE TABLE FLIGHT_DETAILS (ID INTEGER NOT NULL, FLIGHT_DATE DATE, DEPARTURE DATE, ARRIVAL DATE, PLANE_NUMBER VARCHAR2(50) NOT NULL, AIRPORT VARCHAR2(32) NOT NULL, DESTINATION VARCHAR2(32) NOT NULL, cost NUMBER);
DROP TABLE FLIGHT_SCHEDULES;
CREATE TABLE FLIGHT_SCHEDULES (ID INTEGER NOT NULL, FLIGHT_DATE DATE, DEPARTURE DATE, ARRIVAL DATE, AIRCRAFT INTEGER, ROUTE INTEGER, CONSTRAINT FLIGHT_SCHUDULES_PK PRIMARY KEY (ID));
DROP TABLE LUGGAGES;
CREATE TABLE LUGGAGES (ID INTEGER NOT NULL, WEIGHT FLOAT(100), PASSENGER INTEGER, FLIGHT INTEGER, STATUS VARCHAR2(32), DIMENSION DB_201ADB100.DIMENSION_T, PRIMARY KEY (ID));
DROP TABLE MAINTANACE;
CREATE TABLE MAINTANACE (ID INTEGER NOT NULL, START_DATE DATE, END_DATE DATE, AIRCRAFT INTEGER, DETAILS DB_201ADB100.MAINTANACE_T, SYS_NC00007$ VARCHAR2(32), SYS_NC00006$ VARCHAR2(32), PRIMARY KEY (ID));
DROP TABLE PASSENGERS;
CREATE TABLE PASSENGERS (ID INTEGER NOT NULL, NAME VARCHAR2(32), SYS_NC00005$ VARCHAR2(32), PERSONAL_INFO DB_201ADB100.PERSONAL_INFO_T, SYS_NC00004$ VARCHAR2(32), SYS_NC00006$ DB_201ADB100.ADRESS_T, PRIMARY KEY (ID));
DROP TABLE ROUTE;
CREATE TABLE ROUTE (ID INTEGER NOT NULL, AIRPORT VARCHAR2(32) NOT NULL, DESTINATION VARCHAR2(32) NOT NULL, ROUTE_CODE VARCHAR2(16) NOT NULL, SERVICE_FEE FLOAT(126) NOT NULL, FUEL_COST FLOAT(126) NOT NULL, CONSTRAINT ROUTE_PK PRIMARY KEY (ID), CONSTRAINT SYS_C0051951 UNIQUE (ROUTE_CODE));
DROP TABLE STAFFS;
CREATE TABLE STAFFS (ID INTEGER NOT NULL, NAME VARCHAR2(32), ROLE VARCHAR2(32), SYS_NC00007$ DB_201ADB100.ADRESS_T, SYS_NC00006$ VARCHAR2(32), PERSONAL_INFO DB_201ADB100.PERSONAL_INFO_T, SYS_NC00005$ VARCHAR2(32), PRIMARY KEY (ID));
DROP TABLE TRANSACTIONS;
CREATE TABLE TRANSACTIONS (ID INTEGER NOT NULL, BOOKINGDATE DATE, PAYMENT FLOAT(126), PASSENGER INTEGER, FLIGHT INTEGER, PRIMARY KEY (ID));
DROP TABLE WORK;
CREATE TABLE WORK (ID INTEGER NOT NULL, EMPLOYEE INTEGER, FLIGHT INTEGER, PRIMARY KEY (ID));
ALTER TABLE "FLIGHT_SCHEDULES" ADD CONSTRAINT AIRCRAFT_FK FOREIGN KEY ("AIRCRAFT") REFERENCES "AIRCRAFTS" ("ID");
ALTER TABLE "FLIGHT_SCHEDULES" ADD CONSTRAINT ROUTE_FK FOREIGN KEY ("ROUTE") REFERENCES "ROUTE" ("ID");
ALTER TABLE "LUGGAGES" ADD CONSTRAINT LUGGAGES_FLIGHT_FK FOREIGN KEY ("FLIGHT") REFERENCES "FLIGHT_SCHEDULES" ("ID");
ALTER TABLE "LUGGAGES" ADD CONSTRAINT LUGGAGES_PASSENGER_FK FOREIGN KEY ("PASSENGER") REFERENCES "PASSENGERS" ("ID");
ALTER TABLE "LUGGAGES" ADD CHECK (STATUS IN ('DONE', 'LOST', 'IN_FLIGHT', 'FOUND'));
ALTER TABLE "MAINTANACE" ADD CONSTRAINT MAINTANACE_AIRCRAFT_FK FOREIGN KEY ("AIRCRAFT") REFERENCES "AIRCRAFTS" ("ID");
ALTER TABLE "TRANSACTIONS" ADD CONSTRAINT FLIGHT_FK FOREIGN KEY ("FLIGHT") REFERENCES "FLIGHT_SCHEDULES" ("ID");
ALTER TABLE "TRANSACTIONS" ADD CONSTRAINT PASSENGER_FK FOREIGN KEY ("PASSENGER") REFERENCES "PASSENGERS" ("ID");
ALTER TABLE "WORK" ADD CONSTRAINT EMPLOYEE_FK1 FOREIGN KEY ("EMPLOYEE") REFERENCES "STAFFS" ("ID");
ALTER TABLE "WORK" ADD CONSTRAINT FLIGHT_FK2 FOREIGN KEY ("FLIGHT") REFERENCES "FLIGHT_SCHEDULES" ("ID");
DROP TRIGGER ONUPDATESCHEDULE;
--/
CREATE TRIGGER ONUPDATESCHEDULE
  AFTER INSERT OR UPDATE OR DELETE
  on "DB_201ADB100"."FLIGHT_SCHEDULES"
  FOR EACH ROW
  DECLARE
   flight   DELAYED_FLIGHTS;
begin
        IF DELETING THEN
                flight := DELAYED_FLIGHTS('Canceled', :OLD.FLIGHT_DATE, null, :OLD.ID);
        END IF;

        IF UPDATING  THEN 
                flight := DELAYED_FLIGHTS('Delayed', :OLD.FLIGHT_DATE, :NEW.FLIGHT_DATE, :OLD.ID);
        END IF;
        IF flight IS NOT NULL THEN
                INSERT INTO "DB_201ADB100".DELAYED_FLIGHTS_TABLE
                VALUES flight;
        END IF;
end;
/;
DROP TYPE ADRESS_T;
--/
CREATE TYPE ADRESS_T 
AS OBJECT (
STREET    VARCHAR2(20),
A_NUMBER   NUMBER, 
CITY  VARCHAR2(20),
COUNTRY VARCHAR2(32)

)
/;
DROP TYPE DELAYED_FLIGHTS;
--/
CREATE TYPE DELAYED_FLIGHTS 
AS OBJECT (
REASON VARCHAR(32),
FLIGHT_DATE_INIT DATE,
FLIGHT_DATE_LAST DATE,
FLIGHT_ID INTEGER,
MAP MEMBER FUNCTION DELAYED_MINUTES RETURN FLOAT

)
/;
DROP TYPE DIMENSION_T;
--/
CREATE TYPE DIMENSION_T AS VARRAY(3) OF float
/;
DROP TYPE MAINTANACE_T;
--/
CREATE TYPE MAINTANACE_T
AS OBJECT (
PROBLEM_NAME VARCHAR(32),
PROBLEM_SOURCE VARCHAR(32)
)
/;
DROP TYPE PERSONAL_INFO_T;
--/
CREATE TYPE PERSONAL_INFO_T 
AS OBJECT (
phone_number VARCHAR(32),
email VARCHAR(32),
adress REF ADRESS_T
)
/;
DROP TYPE BODY DELAYED_FLIGHTS;
--/
CREATE TYPE BODY DELAYED_FLIGHTS AS
MAP MEMBER FUNCTION DELAYED_MINUTES RETURN FLOAT IS 
    BEGIN
        RETURN (SELF.FLIGHT_DATE_INIT - FLIGHT_DATE_LAST)*60*24;
    END DELAYED_MINUTES;
END;
/;
DROP TYPE BODY ROUTE_TYPE;
--/
CREATE TYPE BODY ROUTE_TYPE AS 
  MAP MEMBER FUNCTION cost_of_flight RETURN FLOAT IS
  BEGIN
     RETURN service_fee * fuel_price;
  END cost_of_flight;
END;
/;


CREATE MATERIALIZED VIEW FLIGHT_DETAILS
BUILD IMMEDIATE
REFRESH FORCE
ON COMMIT
ENABLE QUERY REWRITE
AS
SELECT f.id, f.flight_date, f.departure, f.arrival, a.plane_number, r.airport, r.destination, (r.fuel_cost + r.service_fee) as "cost"
from flight_schedules f, aircrafts a, route r
where f.aircraft = a.id and
f.route = r.id;



   DECLARE
	adr_ref REF ADRESS_T;
BEGIN
        SELECT REF(A) INTO adr_ref
        FROM ADRESSES_TABLE A
        WHERE A.country = 'Italy';
        
        INSERT INTO "PASSENGERS" VALUES (1, 'Math Somthing',PERSONAL_INFO_T('1231323', 'somthisadng@gmail.com', adr_ref));
       
END;

----------------------------------------------------------------------------------------------------------------------------------

INSERT INTO AIRCRAFTS (ID, PLANE_NUMBER, CAPACITY) VALUES (0, 'Airbus 320', 180);
INSERT INTO AIRCRAFTS (ID, PLANE_NUMBER, CAPACITY) VALUES (1, 'Airbus 340', 320);
INSERT INTO AIRCRAFTS (ID, PLANE_NUMBER, CAPACITY) VALUES (2, 'Brazil Airline 130', 100);
INSERT INTO AIRCRAFTS (ID, PLANE_NUMBER, CAPACITY) VALUES (3, 'Boeing 777', 450);
INSERT INTO AIRCRAFTS (ID, PLANE_NUMBER, CAPACITY) VALUES (4, 'Airbus 120', 80);


----------------------------------------------------------------------------------------------------------------------------------


INSERT INTO ROUTE (ID, AIRPORT, DESTINATION, ROUTE_CODE, SERVICE_FEE, FUEL_COST) VALUES (0, 'RIX', 'AFG', '1119', 620, 10000);
INSERT INTO ROUTE (ID, AIRPORT, DESTINATION, ROUTE_CODE, SERVICE_FEE, FUEL_COST) VALUES (2, 'MOS', 'HIX', '3452', 500, 6000);
INSERT INTO ROUTE (ID, AIRPORT, DESTINATION, ROUTE_CODE, SERVICE_FEE, FUEL_COST) VALUES (1, 'IST', 'GRU', '3321', 1000, 20000);
INSERT INTO ROUTE (ID, AIRPORT, DESTINATION, ROUTE_CODE, SERVICE_FEE, FUEL_COST) VALUES (3, 'AZE', 'DUB', '568', 50, 800);
INSERT INTO ROUTE (ID, AIRPORT, DESTINATION, ROUTE_CODE, SERVICE_FEE, FUEL_COST) VALUES (4, 'RIX', 'IST', '321', 80, 200);

----------------------------------------------------------------------------------------------------------------------------------



   DECLARE
	adr_ref REF ADRESS_T;
BEGIN
        SELECT REF(A) INTO adr_ref
        FROM ADRESSES_TABLE A
        WHERE A.street = 'Ikbal';
        
        INSERT INTO "STAFFS" VALUES (2, 'John','Janitor',PERSONAL_INFO_T('5641332', 'abcdg@gmail.com', adr_ref));
       
END;


   DECLARE
	adr_ref REF ADRESS_T;
BEGIN
        SELECT REF(A) INTO adr_ref
        FROM ADRESSES_TABLE A
        WHERE A.street = 'BRAZIL';

        INSERT INTO "Passengers" VALUES (8, 'Muhammed ibn Saddar', PERSONAL_INFO_T('21324134', 'sadsff@gmail.com', adr_ref));

END;


----------------------------------------------------------------------------------------------------------------------------------

INSERT INTO  "LUGGAGES" ("ID", "WEIGHT", "PASSENGER", "FLIGHT", "STATUS", "DIMENSION") VALUES (2, 20, 3, 3, 'IN_FLIGHT', Dimension_t(30,45,15));
INSERT INTO  "LUGGAGES" ("ID", "WEIGHT", "PASSENGER", "FLIGHT", "STATUS", "DIMENSION") VALUES (3, 20, 4, 3, 'DONE', Dimension_t(89,12,65));




INSERT INTO MAINTANACE (ID, START_DATE, END_DATE, AIRCRAFT, DETAILS) VALUES (1, TIMESTAMP '2021-10-08 05:40:00', TIMESTAMP '2021-10-08 06:40:00', 1, MAINTANACE_T('Motor crash', 'Motor'));

INSERT INTO MAINTANACE (ID, START_DATE, END_DATE, AIRCRAFT, DETAILS) VALUES (2, TIMESTAMP '2020-10-08 05:40:00', TIMESTAMP '2020-10-08 06:40:00', 1, MAINTANACE_T('Motor crash asd', 'Motor'));
INSERT INTO MAINTANACE (ID, START_DATE, END_DATE, AIRCRAFT, DETAILS) VALUES (3, TIMESTAMP '2022-10-08 05:40:00', TIMESTAMP '2022-10-08 06:40:00', 1, MAINTANACE_T('Motor crash asasdad', 'asdas'));



//Using DEREF #1

SELECT S.NAME, F.FLIGHT_DATE, DEREF(S.PERSONAL_INFO.ADRESS) FROM STAFFS S, "WORK" W, FLIGHT_SCHEDULES F
WHERE W.EMPLOYEE = S.ID and W.FLIGHT = F.ID;


SELECT P.NAME, F.FLIGHT_DATE, DEREF(P.PERSONAL_INFO.ADRESS) FROM PASSENGERS P, "TRANSACTIONS" T, FLIGHT_SCHEDULES F
WHERE T.PASSENGER = P.ID and T.FLIGHT = F.ID;


SELECT P.NAME, L.STATUS, DEREF(P.PERSONAL_INFO.ADRESS) FROM PASSENGERS P, LUGGAGES L
WHERE L.PASSENGER = P.ID

//VALUE

SELECT VALUE(A) FROM ADRESSES_TABLE A


//TABLE

SELECT D.* FROM LUGGAGES L, TABLE(L.DIMENSION) D WHERE L.ID = 1

//Triggers
CREATE OR REPLACE TRIGGER "DB_201ADB100"."ONUPDATESCHEDULE"
  AFTER INSERT OR UPDATE OR DELETE
  on "DB_201ADB100"."FLIGHT_SCHEDULES"
  FOR EACH ROW
  DECLARE
   flight   DELAYED_FLIGHTS;
begin
        IF DELETING THEN
                flight := DELAYED_FLIGHTS('Canceled', :OLD.FLIGHT_DATE, null, :OLD.ID);
        END IF;

        IF UPDATING  THEN 
                flight := DELAYED_FLIGHTS('Delayed', :OLD.FLIGHT_DATE, :NEW.FLIGHT_DATE, :OLD.ID);
        END IF;
        IF flight IS NOT NULL THEN
                INSERT INTO "DB_201ADB100".DELAYED_FLIGHTS_TABLE
                VALUES flight;
        END IF;
end;

//using map

CREATE OR REPLACE TYPE "DB_201ADB100"."ROUTE_TYPE" 
AS OBJECT (
fuel_price float,
service_fee float,
destination VARCHAR(32),
AIRPORT VARCHAR(32),
MAP MEMBER FUNCTION cost_of_flight RETURN FLOAT
)

CREATE OR REPLACE TYPE BODY "DB_201ADB100"."ROUTE_TYPE" AS 
  MAP MEMBER FUNCTION cost_of_flight RETURN FLOAT IS
  BEGIN
     RETURN service_fee * fuel_price;
  END cost_of_flight;
END;

DECLARE
  r ROUTE_TYPE;
 
BEGIN
  r :=NEW ROUTE_TYPE(10,5, null,null
  DBMS_OUTPUT.PUT_LINE('COST:' || r.cost_of_flight()); -- prints AREA:50
END;